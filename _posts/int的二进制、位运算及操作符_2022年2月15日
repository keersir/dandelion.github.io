int的范围：
  int这个java基本数据类型，它的计算机编码是以0和1结合的二进制编码，总共32位，首位代表符号，后面31位代表int的绝对值。
  int的取值范围是-2^31——2^31-1，就是-2147483648——2147483647。
  至于int的正数取值范围为什么是 2^31-1？
  因为int的正数范围内还有一个0，带上0就正好是2^31，而2147483647 = 2^31-1。

int的二进制编码：
  int的二进制编码是32位，以0举例，0的二进制编码就是 0 0000000000 0000000000 0000000000 0（中间的空格是为了更好的体现二进制的数字）。
  二进制编码的首位为符号位符号位为1，则代表这个数为负数，符号位为0，后面的31位都是代表值。
  则代表这个数为正数，0的二进制编码首位是0，所以不带符号，中间及末尾都是0，那么值为0。
  二进制编码它的每个位置只能存储0和1，int值每加1，它的二进制数就要从末位加1，如果当前位置的值已经是1，那么它就会向前前进一位,它原本的位置用0代替
  例如：int a = 0 
  a 的二进制是  0 0000000000 0000000000 0000000000 0
  int b = a + 1
  b 的二进制是  0 0000000000 0000000000 0000000000 1
  int c = b + 1
  c 的二进制是  0 0000000000 0000000000 0000000000 2
二进制转换为十进制的算法：
  以末位为第0位，首位为第31位，总共32位。
  二进制转换为十进制的算法是，以0举例：
    0的除首位符号位，其他位都是0，那么从末位到第30位转换为十进制是2的位置的次方的和，
    0*2^0 + 0*2^1 + 0*2^2 + …… + 0*2^30   ;
    同理：1的二进制编码是： 0 0000000000 0000000000 0000000000 1   ;
    它的值的算法是：1*2^0 + 0*2^1 + 0*2^2 + …… + 0*2^30   ;
    2的二进制编码是： 0 0000000000 0000000000 0000000001 0  ;
    他的值的算法是：0*2^0 + 1*2^1 + 0*2^2 + …… + 0*2^30   ;
二进制的正数与负数：
  二进制的正数与负数的计算规则不同：
  二进制的正数如上所示。
  二进制的负数，以 -5 举例：
  它的二进制为： 1 1111111111 1111111111 1111111101 1
  它的首位为1，代表符号位，那么先记住这个数带一个"-"号
  剩下的31位  1111111111 1111111111 1111111101 1 取它的值的话需要取反加一
  因为二进制只能使用0、1代表，所以它的取反就是：
  0000000000 0000000000 0000000010 0
  就是将0和1对每一位换掉，原本是0的换成1，原本是1的换成0。
  再从末位加一
  0000000000 0000000000 0000000010 1
  再带上符号就是 -5。
二进制的负数为何要取反加一：
  这个关乎到加减乘除的逻辑，int的区间是-2147483648——2147483647，同一个符号，不管做运算的几个值为正或者为负，它的运算逻辑都是同一个逻辑。
  目的是在做同样的运算时不管是正数或是负数都是同一个逻辑，不必写两套逻辑，在实际执行时更快一些。
int的最大值与最小值：
  int的最大值是：2147483647 
  它的二进制编码为： 0 1111111111 1111111111 1111111111 1，它的计算结果就是2147483647
  int的最小值是：-2147483648
  它的二进制编码为： 1 0000000000 0000000000 0000000000 0，它的计算结果是-2147483648
  关于最小值的算法：
    首位为符号位，剩下的31位取反：1111111111 1111111111 1111111111 1
    再加一就变成了 1 0000000000 0000000000 0000000000 0 这个总共是32位，int在运算时值的位置没有超过32位就正常计算，
    所以值为2^31 = 2147483648，再带上负号就是-2147483648
int的位运算：
  "<<"：左移，整体向左移动，左移的空位由0补上，例如：3的二进制编码是 0 0000000000 0000000000 0000000001 1 
  3 << 1,左移后： 0 0000000000 0000000000 0000000011 0 ，它的值为 6
  3 << 2,左移后： 0 0000000000 0000000000 0000000110 0 ，它的值为 12
  3 << 3,左移后： 0 0000000000 0000000000 0000001100 0 ，它的值为 24
  由此看出，正整数 n << k 就是 n*2^k
  ">>":带符号右移，整体向右移动，不够的位置符号位来补，例如：805306368 的二进制编码是 0 0110000000 0000000000 0000000000 0 
  805306368 >> 1,右移后： 0 0011000000 0000000000 0000000000 0 ，他的值为 402653184 
  805306368 >> 2,右移后： 0 0001100000 0000000000 0000000000 0 ，他的值为 201326592
  805306368 >> 3,右移后： 0 0000110000 0000000000 0000000000 0 ，他的值为 100663296
  由此看出，正整数 n >> k 就是 n/2^k
  -1342177280 的二进制编码是 1 0110000000 0000000000 0000000000 0
  -1342177280 >> 1,右移后： 1 1011000000 0000000000 0000000000 0 ，他的值为 -671088640 
  -1342177280 >> 2,右移后： 1 1101100000 0000000000 0000000000 0 ，他的值为 -335544320
  -1342177280 >> 3,右移后： 1 1110011000 0000000000 0000000000 0 ，他的值为 -218103808
  ">>>":不带符号右移，整体向右移动，不够的位置符号位0来补，例如：-536870912 的二进制编码是 1 1100000000 0000000000 0000000000 0 
  -536870912 >>> 1,右移后： 1 0110000000 0000000000 0000000000 0 ，他的值为 -1342177280 
  -536870912 >>> 2,右移后： 1 0011000000 0000000000 0000000000 0 ，他的值为 -1744830464 
  -536870912 >>> 3,右移后： 1 0001100000 0000000000 0000000000 0 ，他的值为 -1946157056 
java中的 |、&、^ 和~
  a | b :二进制表示的是：相同位置只要有1 ,那么 | 后的结果就是相同位置的值为1
  a & b :二进制表示的是：相同位置只要有0 ,那么 & 后的结果就是相同位置的值为0
  a ^ b :二进制表示的是：相同位置的值相同为0，不同为1
  ~a  :二进制表示的是：反码
  例如：int c= 5;
  二进制就是 0 0000000000 0000000000 0000000010 1
  ~c 的二进制就是：
            1 1111111111 1111111111 1111111101 0
  -c + 1 就是：-5
            1 1111111111 1111111111 1111111101 1
  分析-c + 1 的二进制  除首位 取反
              0000000000 0000000000 0000000010 0
  加一
              0000000000 0000000000 0000000010 1
  这个值为5，带上符号就是 -5
  int d = -c
  d = (~c + 1)
  -c = (~c + 1)
int中的特殊的数：
  int的最小值为-2147483648，最大值为2147483647，
  int的正数都有与其对应的负数的值
  但是0与-2147483648没有
  在int中 int n = -2147483648
  那么： -n = n = (~n + 1)
  int l = 0
  那么： -l = l = (~l + 1)
  特别的是 0 的取反加一已经超出了32位，所以超出的不要，还是0
  
  

  
  
  
  
  
